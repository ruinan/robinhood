1. 4问: 1）Google Doc single server有什么问题；2) eDocument sign 3) 半夜集中收集metrics 4) 有点记不清了关于SQL/NoSQL 的优缺点， 区别


1. google doc: 好多个server, 每个document只能在一个server上面, 问round-robin的load balance有什么问题。
2. 面经的那个关于eventual consistency和strong consistency的问题，并说明为什么。
3. database里面又所有signed document的数据，然后每个server有log记录所有发出notification的document, 问怎么知道哪些document没有send notification. 需要一个scalable的solution.


先是花了2，3分钟介绍规则，然后给60秒介绍自己，接下来20分钟要回答以下的3个technical questions。
1. Google doc, 可以允许多个人访问同一个doc。每个server可以处理很多不同的doc，但同一个doc只由一个固定的server处理。也就是说访问同一个doc的所有request都会发到同一个server 处理分配doc的load balancer是round ronbin，问这个设计有什么问题。
答：round ronbin 两个缺点，第一默认所有server的处理能力相当。如果有的server比较强悍，有的server比较弱鸡，会造成资源浪费。
2.round ronbin不考虑number of connection request a server received。比如一个server上的doc有很多人同时访问，那么有新的doc进来的时候最好就不要再发到这个server上，改进方法Least Connection load balancing。

2. 判该下面三种情况哪种用strong consistency 哪种用 eventual consistency.
第一个是media stream的meta data （eventual）
第二个是web 做user analysis，面试官说可以想象成一个web，显示的是hit counter。 （我答的eventual，不知道对不对）
第三个是银行的deposit和withdraw （strong）

3. 还是doc， 如果所有的user sign了doc 就给每个user 发一个notification。但是由于系统的问题只有50%的doc 成功的给所有人发松了notifiction，问如果给那些没有成功发送notification的doc重新发送notification该怎么做。
现有的条件是 1）database 里存着所有的doc id以及这个doc是否被所有user sign了。2） 有500个server，每个server会存有从该server成功发送notification的doc id

答：1）db里加一列表示是否成功发送过notification 2）500个server各自统计发送成功的doc id，然后对db分别做batch write 3）系统对db做batch get 拿到所有没有发送成功的docId，然后重新发送notification。


1. Google doc, 可以允许多个人访问同一个doc。每个server可以处理很多不同的doc，但同一个doc只由一个固定的server处理。load balancer是round ronbin，问这个设计有什么问题。我说round robin和没有replica会有问题，老黑就继续追问了该用什么替代round robin和怎么replica。
轮询算法的缺点：

轮询调度算法假设所有服务器的处理性能都相同，不关心每台服务器的当前连接数和响应速度。当请求服务间隔时间变化比较大时，轮询调度算法容易导致服务器间的负载不平衡。

所以此种均衡算法适合于服务器组中的所有服务器都有相同的软硬件配置并且平均服务请求相对均衡的情况。



2. 判该下哪种用strong consistency 哪种用 eventual consistency.
第一个是media stream的meta data
第二个是web 做user analysis
第三个是银行的deposit和withdraw
eventual，eventual，strong

3.给 signed doc 发notification 问题。 要给所有signed doc的user 发一个notification。但是只有50%的doc 成功的给所有人发松了notifiction，问如果给那些没有成功发送notification的doc重新发送notification该怎么做。
我答先从server把所有发过的notice汇总到datab‍‍‍‍‍‍‍‍‌‍‌‌‍‌‌‌‌‌ase server上，然后和database比较 找出没发的，再分配给其他server发。 不知道有没有更好的方法。

三道系统设计，Google doc， eventual consistency和strong consistency, send no‍‍‍‍‍‍‍‍‌‍‌‌‍‌‌‌‌‌tification

在一个server上有一个process同时处理多个video，现在发现同时处理超过10个video就会出错，但不知道具体bug是什么。问在debug期间有哪些workaround。
全世界一万台自动售货机每天同一固定时间给一个server发状态，问这种设计有哪些问题。
要开发一个手机上的围棋游戏，现在要做一个feature是通过分析当前棋局给玩家提供下一步的建议，这个feature可以通过1）在手机端直接跑算法 2）把棋局发到server端，server端跑算法然后把结果返回给手机，问这两种approach各有什么优劣。



先是花了2，3分钟介绍规则，然后给60秒介绍自己，接下来20分钟要回答以下的3个technical questions。
1. Google doc, 可以允许多个人访问同一个doc。每个server可以处理很多不同的doc，但同一个doc只由一个固定的server处理。也就是说访问同一个doc的所有request都会发到同一个server 处理分配doc的load balancer是round ronbin，问这个设计有什么问题。
答：round ronbin 两个缺点，第一默认所有server的处理能力相当。如果有的server比较强悍，有的server比较弱鸡，会造成资源浪费。
2.round ronbin不考虑number of connection request a server received。比如一个server上的doc有很多人同时访问，那么有新的doc进来的时候最好就不要再发到这个server上，改进方法Least Connection load balancing。

2. 判该下面三种情况哪种用strong consistency 哪种用 eventual consistency.
第一个是media stream的meta data （eventual）
第二个是web 做user analysis，面试官说可以想象成一个web，显示的是hit counter。 （我答的eventual，不知道对不对）
第三个是银行的deposit和withdraw （strong）

3. 还是doc， 如果所有的user sign了doc 就给每个user 发一个notification。但是由于系统的问题只有50%的doc 成功的给所有人发松了notifiction，问如果给那些没有成功发送notification的doc重新发送notification该怎么做。
现有的条件是 1）database 里存着所有的doc id以及这个doc是否被所有user sign了。2） 有500个server，每个server会存有从该server成功发送notification的doc id
1. Google doc load banlencer,

2. 判断3个情况，分别该用strong consistency 还是 eventual consistency.
只有bank交易的那个需要gurantee strong consistency
3. 类似Docu-sign system， sign完document会send notification to users，但是发现系统最近有50%的概率 虽然sign了document，但没有send notification
所有sign了的document id 会save 到一个database，

所有发出去了的email 和document信息 会存到一个log file，
找出所有需要重新send notification的文件






要求设计一个cron job scheduling system并且支持
- create job
- schedule job
- report success, failure or stale
- highly reliable
- check log of job run

要求的scale相对不大，基本上单机都能搞定。主要讨论了下scheduler功能的实现


设计一个cron job scheduler, ~10k average jobs at any moment
如果job 没法在时限内做完 必须给通知
还是老题 design cron job scheduler, 感觉更讲究solution的完整性，华人小哥很好，我全部说完以后问了如何achieve high availability 如果这个fail了怎么办，如果那个fail了怎么办。‍‍‍‍‍‍‍‍‌‍‌‌‍‌‌‌‌‌
Job Scheduler

重点：

怎麽schedule cron task, 要2 tables, 需要有dispatch service, job queue, worker node, alerting service
ob-Scheduler 的系统设计。 https://leetcode.com/discuss/general-discussion/1082786/System-Design%3A-Designing-a-distributed-Job-Scheduler-or-Many-interesting-concepts-to-learn


在一个server上有一个process同时处理多个video，现在发现同时处理超过10个video就会出错，但不知道具体bug是什么。问在debug期间有哪些workaround。
全世界一万台自动售货机每天同一固定时间给一个server发状态，问这种设计有哪些问题。
要开发一个手机上的围棋游戏，现在要做一个feature是通过分析当前棋局给玩家提供下一步的建议，这个feature可以通过1）在手机端直接跑算法 2）把棋局发到server端，server端跑算法然后把结果返回给手机，问这两种approach各有什么优劣。


在一个server上有一个process同时处理多个video，现在发现同时处理超过10个video就会出错，但不知道具体bug是什么。问在debug期间有哪些workaround。Threadpool; process; tracing for the CPU usage, and print special logs.

全世界一万台自动售货机每天同一固定时间给一个server发状态，问这种设计有哪些问题。

要开发一个手机上的围棋游戏，现在要做一个feature是通过分析当前棋局给玩家提供下一步的建议，这个feature可以通过1）在手机端直接跑算法 2）把棋局发到server端，server端跑算法然后把结果返回给手机，问这两种approach各有什么优劣。手机端 diverty很大，占用手机计算资源，power，卡；server的，cost增加，network is not so good，cause delay & no response。

Google doc, 可以允许多个人访问同一个doc。每个server可以处理很多不同的doc，但同一个doc只由一个固定的server处理。也就是说访问同一个doc的所有request都会发到同一个server 处理分配doc的load balancer是round ronbin，问这个设计有什么问题。 答：round ronbin 两个缺点，第一默认所有server的处理能力相当。如果有的server比较强悍，有的server比较弱鸡，会造成资源浪费。2.round ronbin不考虑number of connection request a server received。比如一个server上的doc有很多人同时访问，那么有新的doc进来的时候最好就不要再发到这个server上，改进方法Least Connection load balancing。

谷歌共享文档可以被多人同时访问编辑，现在有文档存在分布式的100台服务器上，已经有“负载均衡配置”，问当用户量访问上升，performance会受到什么影响？

增长的用户会带的问题主要是 hashing collision，负载增加，解决方案可以使增加 instance OR improve load balanceing algorihtm followup，对于新增的instances，不改变之前已经在处理的process的ID，新增的process 均衡地allocate到不同instances上（新增的和旧的instances）Google doc：有一个google doc这样的产品很多人可以一起edit，一个doc只能被一台机器处理，一台机器可以处理多个doc。有一个load balancer，hashing的方法是doc_id % 100，如果usage grow了，会发生什么？ （注意是usage，我看到有的老的帖子说成了user grow）system会变慢，因为doc会增加user会增加，机器的network，cpu各种都负载会增加所以就会变慢。我就说如果我们解决这种情况就要加机器，但是现在的hashing function加机器很难，加机器的话基本上mapping都break了，所以要更好地scale，我们要用consistent hashing。 interviweer又说ok，下一题。。

google doc，一个load balancer 有100 instance，hash function是100求模，每个instance可以handle多个document，每个document必须由同一个instance handle， 问usage growth影不影响performance 并说一下理由 这个我有点没说清楚 基本也是clarify了半天 我说到hash collision的时候他让我解释了一下 我说觉得不影响 但是usage grow太多肯定会变慢 总之这题。如果usage grow了，会发生什么？ （注意是usage，我看到有的老的帖子说成了user grow） system会变慢，因为doc会增加user会增加，机器的network，cpu各种都负载会增加所以就会变慢。 这时候interviewer就说ok，下一题。 我就说我还能再聊一聊，我就说如果我们解决这种情况就要加机器，但是现在的hashing function加机器很难，加机器的话基本上mapping都break了，所以要更好地scale，我们要用consistent hashing。

就是你deisgn google doc 这个xitong , 然后load balancer把access他们的request发送到100台instance 上，（如何route到这些instance 上的就是通过一个hash function: google_doc_id % 100）每个document exclusively handled by one instance, one instance can hold multiple documents。问你如果usage growth， 对系统会产生影响吗？以及原因。

判该下面三种情况哪种用strong consistency 哪种用 eventual consistency。第一个是media stream的meta data （eventual） 第二个是web 做user analysis，面试官说可以想象成一个web，显示的是hit counter。（eventual） 第三个是银行的deposit和withdraw （strong）第一个场景类似处理 Netflix 的 streaming data。用 eventual consistency 因为是处理streaming data需要 low latency！第二个场景是 数据统计要记录每个click， 类似 facebook like触发一下的功能。用 eventual consistency 因为不需要 high latency，第三个场景是 bank transaction。用 strong consistency,因为transaction的 read data must always be up to date

strong consistency and eventual consistency model used in distributed computing to achieve high availability。strong consistency；All accesses are seen by all parallel processes Strong Consistency offers up-to-date data but at the cost of high latency. eventual consistency 。 if no new updates are made to a given data item, eventually all accesses to that item will return the last updated value. Eventual consistency offers low latency but may reply to “read requests” with unfresh data since all nodes of the database may not have the updated data

strong consistency和eventual consistency 给了三个场景 我其实也没听说过这两个词 但是根据我的理解 eventual consistency有点像atomic？我就按照这个理解给面试官先说了一下我猜的definition 第一个场景是20ms查询一个什么东西的detail info 第二个场景是 数据统计要记录每个click 第三个场景是 bank transaction

还是doc， 如果所有的user sign了doc 就给每个user 发一个notification。但是由于系统的问题只有50%的doc 成功的给所有人发松了notifiction，问如果给那些没有成功发送notification的doc重新发送notification该怎么做。 现有的条件是 1）database 里存着所有的doc id以及这个doc是否被所有user sign了。2） 有500个server，每个server会存有从该server成功发送notification的doc id。答：1）db里加一列表示是否成功发送过notification 2）500个server各自统计发送成功的doc id，然后对db分别做batch write 3）系统对db做batch get 拿到所有没有发送成功的docId，然后重新发送notification

宕机那个 doc需要all people signed 才能发notification log里有发了notification的docID 没发的有一些全sign了有一些没有 这题我真的不太清楚想考啥 所以我就跟他把流程说了一遍。Naive的方法是 traverse 100 server 并且不断更新 signed people set, 最后统一重发，followup如何提高效率？用MapReduce并发处理，因为每一个server没有依赖关系。

系统设计1：谷歌共享文档可以被多人同时访问编辑，现在有文档存在分布式的100台服务器上，已经有“负载均衡配置”，问当用户量访问上升时（usage grows），performance会受到什么影响？Google doc, 有100个instance, 有一个 load balance, assign instance 的方式是 给订文档 id % num of instance, 当user变多会有什么影响？

系统设计2：给了两个一致性哈希的方式名词，那俩名词lz听都没听过，然后给三种场景，问下面三种分布式场景，应该用那种一致性hash方法，以及为什么？

系统设计3：一个共享文档需要很多个人签名，可能成百上千，公司会给这些需要签名人发邮件，但是分布式服务器宕机俩小时，只有50%发出去了，成功的record存在了100台机器里，问怎么找到失败的重发？(500个server, 发email, 当机, 部分server record了部分成功发出去的email, 请问要怎么找到 fail的email 然后重发?) 所有sign了的document id 会save 到一个database，所有发出去了的email 和document信息 会存到一个log file, 找出所有需要重新send notification的文件

假设100台机器和100个文档，每台机器能且只能作为一个文档的服务器，模仿google doc在线给多人同时编辑，问只有部分文档popular的情况下怎么提高性能。

google doc, ID % num_instance, usage growth answer: change mod to consistent hashing and virtual node for balance

strong consistency or eventual consistency a, web site like youtube answer: eventual consistency b, click stream for analysis answer: eventual consistency c, bank for account management answer: strong consistency

online e-signature document, multiple people need to sign one document. when all have signed, send email to everyone for notification. they found bug that they missed 50% email notifications. they have logs for who signs the doc and sending email. The user space and usage is very huge. how to find out all those missing email notification. Answer: streaming process. send those logs to kafak and use spark to parse and compare of number of signature and email notification by the same document id.



************************************************************************* 解答 ***************************************************************
1. Google doc, 可以允许多个人访问同一个doc。每个server可以处理很多不同的doc，但同一个doc只由一个固定的server处理。
也就是说访问同一个doc的所有request都会发到同一个server 处理分配doc的load balancer是round ronbin，问这个设计有什么问题。

答：算法的优点：
算法的优点是其简洁性，它无需记录当前所有连接的状态，所以它是一种无状态调度。

算法的缺点：
轮询调度算法假设所有服务器的处理性能都相同，不关心每台服务器的当前连接数和响应速度。当请求服务间隔时间变化比较大时，轮询调度算法容易导致服务器间的负载不平衡。

总结
所以此种均衡算法适合于服务器组中的所有服务器都有相同的软硬件配置并且平均服务请求相对均衡的情况。

可以用consistent hashing 解决。https://blog.csdn.net/cywosp/article/details/23397179

有没有其他的方法。

1.5 已经有“负载均衡配置”，问当用户量访问上升，performance会受到什么影响？
答： 增长的用户会带的问题主要是 hashing collision，负载增加，
解决方案可以使增加 instance OR improve load balanceing algorihtm followup，
对于新增的instances，不改变之前已经在处理的process的ID，新增的process 均衡地allocate到不同instances上（新增的和旧的instances）

（注意是usage，我看到有的老的帖子说成了user grow）system会变慢，因为doc会增加user会增加，机器的network，
cpu各种都负载会增加所以就会变慢。我就说如果我们解决这种情况就要加机器，但是现在的hashing function加机器很难，
加机器的话基本上mapping都break了，所以要更好地scale，我们要用consistent hashing。


2. 判该下面三种情况哪种用strong consistency 哪种用 eventual consistency.
答：
第一个是media stream的meta data （eventual）。 等一段时间看也无所谓，所以eventual。
第二个是web 做user analysis，面试官说可以想象成一个web，显示的是hit counter。 （我答的eventual，不知道对不对）
第三个是银行的deposit和withdraw （strong consistency) 银行需要高consistency。钱数字不能错。

3. 类似Docu-sign system， sign完document会send notification to users，但是发现系统最近有50%的概率 虽然sign了document，但没有send notification。
还是doc， 如果所有的user sign了doc 就给每个user 发一个notification。但是由于系统的问题只有50%的doc 成功的给所有人发松了notifiction，
问如果给那些没有成功发送notification的doc重新发送notification该怎么做。
现有的条件是 1）database 里存着所有的doc id以及这个doc是否被所有user sign了。2） 有500个server，每个server会存有从该server成功发送notification的doc id
需要一个scalable的solution.

答： 所有sign了的document id 会save 到一个database，所有发出去了的email 和document信息 会存到一个log file，找出所有需要重新send notification的文件。
    1）db里加一列表示是否成功发送过notification 
    2）500个server各自统计发送成功的doc id，然后对db分别做batch write 
    3）系统对db做batch get 拿到所有没有发送成功的docId，然后重新发送notification。


4. 在一个server上有一个process同时处理多个video，现在发现同时处理超过10个video就会出错，但不知道具体bug是什么。问在debug期间有哪些workaround。
答： Video 体积太大。硬件性能不足。程序效率太低。看log，监控系统性能，网络性能。


5. 全世界一万台自动售货机每天同一固定时间给一个server发状态，问这种设计有哪些问题。
答： server 压力太大。容易造成single point of failure. 因为只有一台服务器接受request。解决方法，分时间段发送。如果不行，多搞几个server。


6. 要开发一个手机上的围棋游戏，现在要做一个feature是通过分析当前棋局给玩家提供下一步的建议，这个feature可以通过1）在手机端直接跑算法 
2）把棋局发到server端，server端跑算法然后把结果返回给手机，问这两种approach各有什么优劣。

答： 1. 的优点是，不需要联网；availability 高，low latency; 
        的缺点是，手机性能有限，不能支持太复杂的对战算法。
        
     2. 的优点是，支持高性能算法；可以tracking 用户行；可以学习用户下棋技巧；系统安全性高。可以轻松升级。
        缺点是， 需要联网； latency 高；系统复杂度高。
        

